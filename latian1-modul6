class CircularQueue {
  List<int?> queue;
  int size;
  int front;
  int rear;

  CircularQueue(this.size)
      : queue = List<int?>.filled(0, null, growable: true),
        front = -1,
        rear = -1 {
    queue.length = size;
  }

  bool isFull() {
    return (rear + 1) % size == front;
  }

  bool isEmpty() {
    return front == -1;
  }

  void enqueue(int data) {
    if (isFull()) {
      print('Queue is full!');
      return;
    }
    if (isEmpty()) {
      front = 0;
    }
    rear = (rear + 1) % size;
    queue[rear] = data;
    print('Enqueued: $data');
  }

  int? dequeue() {
    if (isEmpty()) {
      print('Queue is empty!');
      return null;
    }
    int? data = queue[front];
    if (front == rear) {
      // Queue menjadi kosong
      front = -1;
      rear = -1;
    } else {
      front = (front + 1) % size;
    }
    print('Dequeued: $data');
    return data;
  }

  void display() {
    if (isEmpty()) {
      print('Queue is empty!');
      return;
    }
    print('Queue elements are:');
    if (rear >= front) {
      for (int i = front; i <= rear; i++) {
        print(queue[i]);
      }
    } else {
      for (int i = front; i < size; i++) {
        print(queue[i]);
      }
      for (int i = 0; i <= rear; i++) {
        print(queue[i]);
      }
    }
  }
}

void main() {
  CircularQueue q = CircularQueue(5);

  q.enqueue(10);
  q.enqueue(20);
  q.enqueue(30);
  q.enqueue(40);
  q.enqueue(50); // Full sekarang

  q.display();

  q.dequeue();
  q.dequeue();

  q.display();

  q.enqueue(60);
  q.enqueue(70);

  q.display();
}
